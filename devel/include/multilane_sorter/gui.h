// Generated by gencpp from file multilane_sorter/gui.msg
// DO NOT EDIT!


#ifndef MULTILANE_SORTER_MESSAGE_GUI_H
#define MULTILANE_SORTER_MESSAGE_GUI_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>

namespace multilane_sorter
{
template <class ContainerAllocator>
struct gui_
{
  typedef gui_<ContainerAllocator> Type;

  gui_()
    : header()
    , sensorStatus()
    , internetStatus()
    , dataUploadStatus()
    , systemWarning()
    , guiWarning()
    , throughputOverAll()
    , throughputAccepted()
    , throughputRejected()
    , sortingUptime()
    , systemUptime()
    , actuatorStats()
    , lane_1()
    , lane_2()
    , lane_3()
    , lane_4()  {
    }
  gui_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensorStatus(_alloc)
    , internetStatus(_alloc)
    , dataUploadStatus(_alloc)
    , systemWarning(_alloc)
    , guiWarning(_alloc)
    , throughputOverAll(_alloc)
    , throughputAccepted(_alloc)
    , throughputRejected(_alloc)
    , sortingUptime(_alloc)
    , systemUptime(_alloc)
    , actuatorStats(_alloc)
    , lane_1(_alloc)
    , lane_2(_alloc)
    , lane_3(_alloc)
    , lane_4(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sensorStatus_type;
  _sensorStatus_type sensorStatus;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _internetStatus_type;
  _internetStatus_type internetStatus;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dataUploadStatus_type;
  _dataUploadStatus_type dataUploadStatus;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _systemWarning_type;
  _systemWarning_type systemWarning;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _guiWarning_type;
  _guiWarning_type guiWarning;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _throughputOverAll_type;
  _throughputOverAll_type throughputOverAll;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _throughputAccepted_type;
  _throughputAccepted_type throughputAccepted;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _throughputRejected_type;
  _throughputRejected_type throughputRejected;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sortingUptime_type;
  _sortingUptime_type sortingUptime;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _systemUptime_type;
  _systemUptime_type systemUptime;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _actuatorStats_type;
  _actuatorStats_type actuatorStats;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _lane_1_type;
  _lane_1_type lane_1;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _lane_2_type;
  _lane_2_type lane_2;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _lane_3_type;
  _lane_3_type lane_3;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _lane_4_type;
  _lane_4_type lane_4;





  typedef boost::shared_ptr< ::multilane_sorter::gui_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multilane_sorter::gui_<ContainerAllocator> const> ConstPtr;

}; // struct gui_

typedef ::multilane_sorter::gui_<std::allocator<void> > gui;

typedef boost::shared_ptr< ::multilane_sorter::gui > guiPtr;
typedef boost::shared_ptr< ::multilane_sorter::gui const> guiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multilane_sorter::gui_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multilane_sorter::gui_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multilane_sorter::gui_<ContainerAllocator1> & lhs, const ::multilane_sorter::gui_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sensorStatus == rhs.sensorStatus &&
    lhs.internetStatus == rhs.internetStatus &&
    lhs.dataUploadStatus == rhs.dataUploadStatus &&
    lhs.systemWarning == rhs.systemWarning &&
    lhs.guiWarning == rhs.guiWarning &&
    lhs.throughputOverAll == rhs.throughputOverAll &&
    lhs.throughputAccepted == rhs.throughputAccepted &&
    lhs.throughputRejected == rhs.throughputRejected &&
    lhs.sortingUptime == rhs.sortingUptime &&
    lhs.systemUptime == rhs.systemUptime &&
    lhs.actuatorStats == rhs.actuatorStats &&
    lhs.lane_1 == rhs.lane_1 &&
    lhs.lane_2 == rhs.lane_2 &&
    lhs.lane_3 == rhs.lane_3 &&
    lhs.lane_4 == rhs.lane_4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multilane_sorter::gui_<ContainerAllocator1> & lhs, const ::multilane_sorter::gui_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multilane_sorter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multilane_sorter::gui_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multilane_sorter::gui_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multilane_sorter::gui_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multilane_sorter::gui_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multilane_sorter::gui_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multilane_sorter::gui_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multilane_sorter::gui_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65a059bbb76f43602ed8d5fcfa654321";
  }

  static const char* value(const ::multilane_sorter::gui_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65a059bbb76f4360ULL;
  static const uint64_t static_value2 = 0x2ed8d5fcfa654321ULL;
};

template<class ContainerAllocator>
struct DataType< ::multilane_sorter::gui_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multilane_sorter/gui";
  }

  static const char* value(const ::multilane_sorter::gui_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multilane_sorter::gui_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string sensorStatus\n"
"string internetStatus\n"
"string dataUploadStatus\n"
"string systemWarning\n"
"string guiWarning\n"
"string throughputOverAll\n"
"string throughputAccepted\n"
"string throughputRejected\n"
"string sortingUptime\n"
"string systemUptime\n"
"string actuatorStats\n"
"sensor_msgs/CompressedImage lane_1\n"
"sensor_msgs/CompressedImage lane_2\n"
"sensor_msgs/CompressedImage lane_3\n"
"sensor_msgs/CompressedImage lane_4\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/CompressedImage\n"
"# This message contains a compressed image\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"\n"
"string format        # Specifies the format of the data\n"
"                     #   Acceptable values:\n"
"                     #     jpeg, png\n"
"uint8[] data         # Compressed image buffer\n"
;
  }

  static const char* value(const ::multilane_sorter::gui_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multilane_sorter::gui_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensorStatus);
      stream.next(m.internetStatus);
      stream.next(m.dataUploadStatus);
      stream.next(m.systemWarning);
      stream.next(m.guiWarning);
      stream.next(m.throughputOverAll);
      stream.next(m.throughputAccepted);
      stream.next(m.throughputRejected);
      stream.next(m.sortingUptime);
      stream.next(m.systemUptime);
      stream.next(m.actuatorStats);
      stream.next(m.lane_1);
      stream.next(m.lane_2);
      stream.next(m.lane_3);
      stream.next(m.lane_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gui_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multilane_sorter::gui_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multilane_sorter::gui_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensorStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sensorStatus);
    s << indent << "internetStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.internetStatus);
    s << indent << "dataUploadStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dataUploadStatus);
    s << indent << "systemWarning: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.systemWarning);
    s << indent << "guiWarning: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.guiWarning);
    s << indent << "throughputOverAll: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.throughputOverAll);
    s << indent << "throughputAccepted: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.throughputAccepted);
    s << indent << "throughputRejected: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.throughputRejected);
    s << indent << "sortingUptime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sortingUptime);
    s << indent << "systemUptime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.systemUptime);
    s << indent << "actuatorStats: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.actuatorStats);
    s << indent << "lane_1: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.lane_1);
    s << indent << "lane_2: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.lane_2);
    s << indent << "lane_3: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.lane_3);
    s << indent << "lane_4: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.lane_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTILANE_SORTER_MESSAGE_GUI_H
