// Generated by gencpp from file multilane_sorter/defects.msg
// DO NOT EDIT!


#ifndef MULTILANE_SORTER_MESSAGE_DEFECTS_H
#define MULTILANE_SORTER_MESSAGE_DEFECTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multilane_sorter
{
template <class ContainerAllocator>
struct defects_
{
  typedef defects_<ContainerAllocator> Type;

  defects_()
    : normal(0.0)
    , bs(0.0)
    , peeled(0.0)
    , sprouts(0.0)
    , rotten(0.0)
    , doubles(0.0)  {
    }
  defects_(const ContainerAllocator& _alloc)
    : normal(0.0)
    , bs(0.0)
    , peeled(0.0)
    , sprouts(0.0)
    , rotten(0.0)
    , doubles(0.0)  {
  (void)_alloc;
    }



   typedef float _normal_type;
  _normal_type normal;

   typedef float _bs_type;
  _bs_type bs;

   typedef float _peeled_type;
  _peeled_type peeled;

   typedef float _sprouts_type;
  _sprouts_type sprouts;

   typedef float _rotten_type;
  _rotten_type rotten;

   typedef float _doubles_type;
  _doubles_type doubles;





  typedef boost::shared_ptr< ::multilane_sorter::defects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multilane_sorter::defects_<ContainerAllocator> const> ConstPtr;

}; // struct defects_

typedef ::multilane_sorter::defects_<std::allocator<void> > defects;

typedef boost::shared_ptr< ::multilane_sorter::defects > defectsPtr;
typedef boost::shared_ptr< ::multilane_sorter::defects const> defectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multilane_sorter::defects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multilane_sorter::defects_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multilane_sorter::defects_<ContainerAllocator1> & lhs, const ::multilane_sorter::defects_<ContainerAllocator2> & rhs)
{
  return lhs.normal == rhs.normal &&
    lhs.bs == rhs.bs &&
    lhs.peeled == rhs.peeled &&
    lhs.sprouts == rhs.sprouts &&
    lhs.rotten == rhs.rotten &&
    lhs.doubles == rhs.doubles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multilane_sorter::defects_<ContainerAllocator1> & lhs, const ::multilane_sorter::defects_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multilane_sorter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multilane_sorter::defects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multilane_sorter::defects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multilane_sorter::defects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multilane_sorter::defects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multilane_sorter::defects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multilane_sorter::defects_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multilane_sorter::defects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cedfcaa9a7bdfcb45d2788094a026d07";
  }

  static const char* value(const ::multilane_sorter::defects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcedfcaa9a7bdfcb4ULL;
  static const uint64_t static_value2 = 0x5d2788094a026d07ULL;
};

template<class ContainerAllocator>
struct DataType< ::multilane_sorter::defects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multilane_sorter/defects";
  }

  static const char* value(const ::multilane_sorter::defects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multilane_sorter::defects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 normal\n"
"float32 bs\n"
"float32 peeled\n"
"float32 sprouts\n"
"float32 rotten\n"
"float32 doubles\n"
;
  }

  static const char* value(const ::multilane_sorter::defects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multilane_sorter::defects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.normal);
      stream.next(m.bs);
      stream.next(m.peeled);
      stream.next(m.sprouts);
      stream.next(m.rotten);
      stream.next(m.doubles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct defects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multilane_sorter::defects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multilane_sorter::defects_<ContainerAllocator>& v)
  {
    s << indent << "normal: ";
    Printer<float>::stream(s, indent + "  ", v.normal);
    s << indent << "bs: ";
    Printer<float>::stream(s, indent + "  ", v.bs);
    s << indent << "peeled: ";
    Printer<float>::stream(s, indent + "  ", v.peeled);
    s << indent << "sprouts: ";
    Printer<float>::stream(s, indent + "  ", v.sprouts);
    s << indent << "rotten: ";
    Printer<float>::stream(s, indent + "  ", v.rotten);
    s << indent << "doubles: ";
    Printer<float>::stream(s, indent + "  ", v.doubles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTILANE_SORTER_MESSAGE_DEFECTS_H
