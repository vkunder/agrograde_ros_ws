// Generated by gencpp from file multilane_sorter/inference.msg
// DO NOT EDIT!


#ifndef MULTILANE_SORTER_MESSAGE_INFERENCE_H
#define MULTILANE_SORTER_MESSAGE_INFERENCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace multilane_sorter
{
template <class ContainerAllocator>
struct inference_
{
  typedef inference_<ContainerAllocator> Type;

  inference_()
    : header()
    , sprout(0.0)
    , peeled(0.0)
    , rotten(0.0)
    , blacksmut(0.0)
    , double(0.0)
    , size(0.0)
    , user1(0.0)
    , user2(0.0)
    , user3(0.0)
    , user4(0.0)
    , user5(0.0)  {
    }
  inference_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sprout(0.0)
    , peeled(0.0)
    , rotten(0.0)
    , blacksmut(0.0)
    , double(0.0)
    , size(0.0)
    , user1(0.0)
    , user2(0.0)
    , user3(0.0)
    , user4(0.0)
    , user5(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _sprout_type;
  _sprout_type sprout;

   typedef float _peeled_type;
  _peeled_type peeled;

   typedef float _rotten_type;
  _rotten_type rotten;

   typedef float _blacksmut_type;
  _blacksmut_type blacksmut;

   typedef float _double_type;
  _double_type double;

   typedef float _size_type;
  _size_type size;

   typedef float _user1_type;
  _user1_type user1;

   typedef float _user2_type;
  _user2_type user2;

   typedef float _user3_type;
  _user3_type user3;

   typedef float _user4_type;
  _user4_type user4;

   typedef float _user5_type;
  _user5_type user5;





  typedef boost::shared_ptr< ::multilane_sorter::inference_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multilane_sorter::inference_<ContainerAllocator> const> ConstPtr;

}; // struct inference_

typedef ::multilane_sorter::inference_<std::allocator<void> > inference;

typedef boost::shared_ptr< ::multilane_sorter::inference > inferencePtr;
typedef boost::shared_ptr< ::multilane_sorter::inference const> inferenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multilane_sorter::inference_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multilane_sorter::inference_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multilane_sorter::inference_<ContainerAllocator1> & lhs, const ::multilane_sorter::inference_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sprout == rhs.sprout &&
    lhs.peeled == rhs.peeled &&
    lhs.rotten == rhs.rotten &&
    lhs.blacksmut == rhs.blacksmut &&
    lhs.double == rhs.double &&
    lhs.size == rhs.size &&
    lhs.user1 == rhs.user1 &&
    lhs.user2 == rhs.user2 &&
    lhs.user3 == rhs.user3 &&
    lhs.user4 == rhs.user4 &&
    lhs.user5 == rhs.user5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multilane_sorter::inference_<ContainerAllocator1> & lhs, const ::multilane_sorter::inference_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multilane_sorter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multilane_sorter::inference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multilane_sorter::inference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multilane_sorter::inference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multilane_sorter::inference_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multilane_sorter::inference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multilane_sorter::inference_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multilane_sorter::inference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa06a43907df191d69024618ed6dd509";
  }

  static const char* value(const ::multilane_sorter::inference_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa06a43907df191dULL;
  static const uint64_t static_value2 = 0x69024618ed6dd509ULL;
};

template<class ContainerAllocator>
struct DataType< ::multilane_sorter::inference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multilane_sorter/inference";
  }

  static const char* value(const ::multilane_sorter::inference_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multilane_sorter::inference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"Header header\n"
"float32 sprout\n"
"float32 peeled\n"
"float32 rotten\n"
"float32 blacksmut\n"
"float32 double\n"
"\n"
"float32 size\n"
"float32 user1\n"
"float32 user2\n"
"float32 user3\n"
"float32 user4\n"
"float32 user5\n"
"\n"
"# Header header\n"
"# float32 prediction\n"
"# float32 onion\n"
"# float32 blacksmut\n"
"# float32 peel\n"
"# float32 size\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::multilane_sorter::inference_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multilane_sorter::inference_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sprout);
      stream.next(m.peeled);
      stream.next(m.rotten);
      stream.next(m.blacksmut);
      stream.next(m.double);
      stream.next(m.size);
      stream.next(m.user1);
      stream.next(m.user2);
      stream.next(m.user3);
      stream.next(m.user4);
      stream.next(m.user5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct inference_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multilane_sorter::inference_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multilane_sorter::inference_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sprout: ";
    Printer<float>::stream(s, indent + "  ", v.sprout);
    s << indent << "peeled: ";
    Printer<float>::stream(s, indent + "  ", v.peeled);
    s << indent << "rotten: ";
    Printer<float>::stream(s, indent + "  ", v.rotten);
    s << indent << "blacksmut: ";
    Printer<float>::stream(s, indent + "  ", v.blacksmut);
    s << indent << "double: ";
    Printer<float>::stream(s, indent + "  ", v.double);
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "user1: ";
    Printer<float>::stream(s, indent + "  ", v.user1);
    s << indent << "user2: ";
    Printer<float>::stream(s, indent + "  ", v.user2);
    s << indent << "user3: ";
    Printer<float>::stream(s, indent + "  ", v.user3);
    s << indent << "user4: ";
    Printer<float>::stream(s, indent + "  ", v.user4);
    s << indent << "user5: ";
    Printer<float>::stream(s, indent + "  ", v.user5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTILANE_SORTER_MESSAGE_INFERENCE_H
